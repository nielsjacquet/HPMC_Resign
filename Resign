#!/usr/bin/env bash

## for debugging, remove all single #, double ## is used for documentation
cleanup()
{
  rm -rf "$tempFolder"
}

exitRoutine()
{
  cleanup
  exit 1
}

helpFunction()
{
  clear
  echo
  echo This script is drag and drop friendly,
  echo you can just drop the ipa file after using -i as option
  echo
  echo Correct use of the script:
  echo "Resign -v (version) -i (ipafile) -? or -h for help"
  echo
  cleanup
  exit 1
}

## Define the aruments that can be used in the script
while getopts "v:i:?:h:" opt
do
   case "$opt" in
      v ) versionArg="$OPTARG" ;;           # HPMC version argument
      i ) ipaArg="$OPTARG" ;;               # Ipa path argument
      ? ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
      h ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
   esac
done

## check if needed options are filled in before running the script
optionchecks()
{
# echo optionchecks
if [[ -z "$versionArg" ]] || [[ -z "$ipaArg" ]]
  then
  helpFunction
fi
}

## set the global variables
setVars()
{
  codesign="GZ75RPKBFF"
  fixDate=$(date +"%Y%m%d-%Hh%M")
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"        # Homedir
  profilePath="$DIR/_SharedResources/ProvisioningProfile"
  tempFolder="$DIR/_TEMP"
  ipaPath="$ipaArg"
  extractFile="$tempFolder/test.txt"
}

## set the version specific variables
versionVars()
{
  if [[ -z "$versionArg" ]]
  then
    echo no verion used
    exitRoutine
  fi

  if [[ "$versionArg" = 3.5p5 ]]
    then
      resourcesPath="$DIR/HPMC3.5p5/Resources"
      iosJsPath="$resourcesPath/ios"
    else
      echo
      echo no correct version is used
      helpFunction
  fi
}

## grab the provisioning Profile in the shared resources folder
getProfile()
{
  cd "$profilePath"
  provisioningProfile=$(ls | grep ".mobileprovision")
  provisioningProfile="$profilePath/$provisioningProfile"
  # echo provisioningProfile: $provisioningProfile
}

## grab the dylib in the version specific resources folder
setDylib()
{
  cd "$resourcesPath"
  dylib=$(ls | grep ".dylib")
  dyLib="$resourcesPath/$dylib"
  # echo dylib: $dyLib
}

## unzip the ipa in the temp folder to extract the entitlements
## and configs etc
unZipFunction()
{
  unzip -qq "$ipaPath" -d "$tempFolder"
  payloadFolder="$tempFolder/Payload"
  cd "$payloadFolder"
  payloadApp=$(ls | grep '.app')
  # echo payloadFolder: $payloadFolder
  # echo payloadApp: $payloadApp
}

## extract and modify the entitlements,
## modification is needed as the dev profile fails when apns is enabled and get-task-allow is false
extractEntitlements()
{
  cd "$tempFolder"
  codesign -d -vv --entitlements entitlements.xml.plist --xml ./Payload/"$payloadApp"
  entitlementsPath="$tempFolder/entitlements.xml.plist"
  plutil -convert xml1 "$entitlementsPath"
  #cat "$entitlementsPath"
  LC_ALL=C sed -i '' 's/false/true/g' "$entitlementsPath"                                                    #edit the get-task-allow to true for the Resigning
  #LC_ALL=C sed -i '' 's/8MHBGG6X8S.com.ucb.apps.myucb4me.dev/8MHBGG6X8S.*/g' "$entitlementsPath"             #edit the bundleid to wildcard for the Resigning
  LC_ALL=C sed -i '' 's/<string>production<\/string>//g' "$entitlementsPath"
  LC_ALL=C sed -i '' 's/<key>aps-environment<\/key>//g' "$entitlementsPath"
  #cat "$entitlementsPath"
}

## Set the new name used in the signing
setNewIpaName()
{
  nameDate=$(date +"%Y%m%d")
  # echo nameDate: $nameDate
  # echo ipaPath: $ipaPath
  oldFullIpaName=$(basename $ipaPath)
  # echo newipaName: $oldFullIpaName
  oldBaseIpaName=$(echo ${oldFullIpaName%????})
  # echo oldBaseIpaName: $oldBaseIpaName
  newipaName="$oldBaseIpaName"-HPMCenabled-"$nameDate"-"$versionArg".ipa
  # echo newipaName: $newipaName
}

## Make the new destination folder
makeDestiationFolder()
{
  fixDateFolder="$DIR"/SignedIpas/Apps/"$fixDate"-"$oldBaseIpaName"-HPMCenabled
  mkdir "$fixDateFolder"
}

## Do the actual resigning
Resigning()
{
  cd "$resourcesPath"
  ./iOSEnabler "$ipaPath" -inject $dylib -codesign $codesign -p $provisioningProfile -j $iosJsPath -e $entitlementsPath -n "$newipaName" -d "$fixDateFolder" #-v
  ##                      -inject the dylib defined in the versionvars
  ##                                     -codesign signature of the application
  ##                                                         -p ProvisioningProfile with the correct signingcert (codesing) and devices defined in the apple dev page
  ##                                                                                 -j path of the ios folder for extra frameworks
  ##                                                                                               -e path of the extracted and modified entitlements used for Resigning
  ##                                                                                                                     -n give the resigned app a name
  ##                                                                                                                                      -d define the destation after resigning
  ##                                                                                                                                                        #-v verbose that there is some output in the terminal remove # if needed for debugging.
}

## Copy extra information to the destination folder
copy()
{
  cp "$entitlementsPath" "$fixDateFolder"
  cp "$payloadFolder/$payloadApp/Info.plist" "$fixDateFolder"
  cp "$payloadFolder/$payloadApp/Config.plist" "$fixDateFolder"
  provDevices="$fixDateFolder/ProvisionedDevices.txt"
  LC_ALL=C sed -n '1, /<key>ProvisionedDevices/!p; /<key>ProvisionedDevices/p' "$provisioningProfile" >> $extractFile
  LC_ALL=C sed '1,/TeamIdentifier/!d' $extractFile >> "$provDevices"
  rm $extractFile
}

###-----------------------------------
#calling the funtions
optionchecks
setVars
versionVars
getProfile
setDylib
unZipFunction
extractEntitlements
setNewIpaName
makeDestiationFolder
Resigning
copy
cleanup
open "$fixDateFolder"
