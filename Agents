#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"        # Homedir

## for debugging, remove all single #, double ## is used for documentation
echo "__________              .__                 ____ _________________________    _____                         __          "
echo "\______   \ ____   _____|__| ____   ____   |    |   \_   _____/\__    ___/   /  _  \    ____   ____   _____/  |_  ______"
echo " |       _// __ \ /  ___/  |/ ___\ /    \  |    |   /|    __)    |    |     /  /_\  \  / ___\_/ __ \ /    \   __\/  ___/"
echo " |    |   \  ___/ \___ \|  / /_/  >   |  \ |    |  / |     \     |    |    /    |    \/ /_/  >  ___/|   |  \  |  \___ \ "
echo " |____|_  /\___  >____  >__\___  /|___|  / |______/  \___  /     |____|    \____|__  /\___  / \___  >___|  /__| /____  >"
echo "        \/     \/     \/  /_____/      \/                \/                        \//_____/      \/     \/          \/ "

cleanup()
{
  rm -rf "$tempFolder"
}

exitRoutine()
{
  cleanup
  exit 1
}

helpFunction()
{
  clear
  echo This script will automate the signing of the Agents needed for
  echo UFT testing
  echo ""
  echo Correct use of the script:
  echo "Agents -v (version) -? or -h for help"
  echo
  echo "Please only type the version without HPMC"
  echo
  cd $DIR
  availableVersions=$(ls -d */ | grep HPMC)
  echo "Available versions:"
  for folders in $availableVersions
    do
      echo $folders
    done
  echo
  cleanup
  exit 1
}

## Define the aruments that can be used in the script
while getopts "v:?:h:" opt
do
   case "$opt" in
      v ) versionArg="$OPTARG" ;;           # HPMC version argument
      ? ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
      h ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
   esac
done

## check if needed options are filled in before running the script
optionchecks()
{
# echo optionchecks
if [[ -z "$versionArg" ]]
  then
  helpFunction
fi
}

setVars()
{
  codesign="GZ75RPKBFF"
  fixDate=$(date +"%Y%m%d-%Hh%M")
  profilePath="$DIR/_SharedResources/ProvisioningProfile"
  tempFolder="$DIR/_TEMP"
  extractFile="$tempFolder/test.txt"
}

## set the version specific variables
versionVars()
{
  ##first check if the versionArg is not empty
  if [[ -z "$versionArg" ]]
    then
      echo no verion used
      exitRoutine
    fi

  ##Grabbing and checkig if the versionArg is correct
  cd $DIR                                                                                       ##go to the homefolder
  availableVersions=$(ls -d */ | grep HPMC)                                                     ##list all folders beginning with HPMC
  ##echo availableVersions: $availableVersions
  if [[ -z $availableVersions ]]                                                                ##if $availableVersions is empty, show the helpFunction
  then
    echo "The version you selected is not available, please check and re-run the script."
    helpFunction
  fi

  ##Setting the version variables from $versionArg
  resourcesPath="$DIR/HPMC$versionArg/Resources"
  iosJsPath="$resourcesPath/ios"
  agentFolder="$DIR/HPMC$versionArg/OriginalAgents"
}

## grab the provisioning Profile in the shared resources folder
getProfile()
{
  echo Grabbing the provisioningProfile
  cd "$profilePath"
  provisioningProfile=$(ls | grep ".mobileprovision")
  provisioningProfile="$profilePath/$provisioningProfile"
  echo provisioningProfile: $provisioningProfile
}

## Make the new destination folder
makeDestiationFolder()
{
  fixDateFolder="$DIR"/SignedIpas/Agents/"$fixDate"Agents-HPMCenabled-"$versionArg"
  mkdir "$fixDateFolder"
}

## Resign all the agents in the version specific folder
## The for funcions will do all the agents one by one
resigning()
{
  for agents in "$agentFolder"/*
   do
     ogIpa=$(echo "$(basename "$agents")")
     echo "$ogIpa"
     echo profilePath: $provisioningProfile
     printf "${YELLOW}The ipa that will be signed: ${GREEN}$ogIpa${NC}\n"
     cd "$resourcesPath"
         ./iOSEnabler "$agentFolder/$ogIpa" -codesign $codesign -p "$provisioningProfile" -V -n "$ogIpa" -d "$fixDateFolder" #-v
  done
}

## Copy the provisioned devices from the provisioning profile to the signing folder for future reference
copy()
{
  mkdir "$DIR/_TEMP"
  provDevices="$fixDateFolder/ProvisionedDevices.txt"
  LC_ALL=C sed -n '1, /<key>ProvisionedDevices/!p; /<key>ProvisionedDevices/p' "$provisioningProfile" >> $extractFile
  LC_ALL=C sed '1,/TeamIdentifier/!d' $extractFile >> "$provDevices"
  rm $extractFile
}

###-----------------------------------
## calling the funtions
optionchecks
setVars
versionVars
getProfile
makeDestiationFolder
resigning
copy
cleanup
open "$fixDateFolder"
